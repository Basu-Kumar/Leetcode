// Given the head of a singly linked list, return the middle node of the linked list.
//If there are two middle nodes, return the second middle node.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        if(head==NULL){
            return NULL;
        }
        if(head->next==NULL){
            return head;
        }
        if(head->next->next==NULL){
            return head->next;
        }
        
        ListNode *temp1=head;
        ListNode *temp2=head->next;

        while(temp2!=NULL){
            temp2=temp2->next;
            temp1=temp1->next;
            if(temp2!=NULL){
                temp2=temp2->next;
            }
        }
        return temp1;
    }
};