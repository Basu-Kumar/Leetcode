// Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL){
            return head;
        }
        ListNode *temp1=head;
        ListNode *temp2=head->next;
        while(temp2!=NULL){
            temp2=temp2->next;
            temp1=temp1->next;
            if(temp2!=NULL){
                temp2=temp2->next;
            }
        }
        ListNode *prev=NULL;
        while(temp1!=NULL){
            ListNode *a=temp1->next;
            temp1->next=prev;
            prev=temp1;
            temp1=a;
            
        }
        while(prev!=NULL){
            if(head->val!=prev->val){
                return false;
            }
            head=head->next;
            prev=prev->next;
        }
        return true;
    }
};
 