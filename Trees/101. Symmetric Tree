Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
            return root==NULL || isSymmetricHelp(root->left,root->right);
        }

        bool isSymmetricHelp(TreeNode *leftNode,TreeNode *rightNode){
            if(leftNode==NULL || rightNode==NULL){
                return leftNode==rightNode;
            }
            if(leftNode->val!=rightNode->val){
                return false;
            }
            return isSymmetricHelp(leftNode->left,rightNode->right) && 
            isSymmetricHelp(leftNode->right,rightNode->left);

        }
    
};